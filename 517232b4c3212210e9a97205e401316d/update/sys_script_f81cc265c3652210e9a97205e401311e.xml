<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_1763019_furgonch_prenotazione</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Gestione funzionalità prenotazione</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous) {
    var isDelete = current.operation() === 'delete';
    var isInsert = current.operation() === 'insert';
    var isUpdate = current.operation() === 'update';
 
    var veicoloTable = 'x_1763019_furgonch_veicolo';
    var utenteTable = 'x_1763019_furgonch_utente';
 
    // === DELETE ===
    if (isDelete && current.veicolo) {
        var veicoloDel = new GlideRecord(veicoloTable);
        if (veicoloDel.get(current.veicolo)) {
            veicoloDel.setValue('disponibile', 'disponibile');
            veicoloDel.update();
            gs.info('[DELETE] Veicolo reso disponibile.');
        }
        return;
    }
 
    // === INSERT ===
    if (isInsert && current.veicolo) {
        var veicoloIns = new GlideRecord(veicoloTable);
        if (veicoloIns.get(current.veicolo)) {
            veicoloIns.setValue('disponibile', 'non_disponibile');
            veicoloIns.update();
            gs.info('[INSERT] Veicolo impostato come non disponibile.');
        }
 
        // Ricalcolo credito
        var utente = new GlideRecord(utenteTable);
        if (utente.get(current.cliente)) {
            var costoPrenotazione = parseFloat(current.costo_totale || 0);
            var creditoAttuale = parseFloat(utente.getValue('credito'));
 
            if (creditoAttuale >= costoPrenotazione) {
                utente.setValue('credito', creditoAttuale - costoPrenotazione);
                utente.update();
                gs.info('[INSERT] Credito scalato. Nuovo saldo: €' + (creditoAttuale - costoPrenotazione));
            } else {
                gs.error('[INSERT] Credito insufficiente per prenotare.');
                current.setAbortAction(true); // Blocca la prenotazione
            }
        }
 
        return;
    }
 
    // === ANNULLAMENTO da flag ===
    if (isUpdate && current.annullare_prenotazione && !previous.annullare_prenotazione) {
        current.stato_prenotazione = 'annullata';
 
        if (current.assicurata && current.cliente) {
            // Se assicurata → rimborso + costo azzerato
            var utenteAnn = new GlideRecord(utenteTable);
            if (utenteAnn.get(current.cliente)) {
                var rimborso = parseFloat(previous.costo_totale || 0);
                var creditoAttuale = parseFloat(utenteAnn.getValue('credito') || 0);
                var creditoNuovo = Math.min(creditoAttuale + rimborso, 1500);
                var effettivoRimborso = creditoNuovo - creditoAttuale;
 
                utenteAnn.setValue('credito', creditoNuovo);
                utenteAnn.update();
 
                current.credito_rimborsato = effettivoRimborso;
                current.costo_totale = 0;
                gs.info('[ANNULLAMENTO] Rimborso effettivo: €' + effettivoRimborso);
            }
        } else {
            // Non assicurata → nessun rimborso, costo invariato
            current.credito_rimborsato = 0;
            current.costo_totale = previous.costo_totale;
        }
 
        // Rendi veicolo disponibile
        if (current.veicolo) {
            var veicoloAnn = new GlideRecord(veicoloTable);
            if (veicoloAnn.get(current.veicolo)) {
                veicoloAnn.setValue('disponibile', 'disponibile');
                veicoloAnn.update();
            }
        }
 
        return;
    }
 
    // === CAMBIO MANUALE STATO a "annullata" ===
    if (isUpdate &&
        current.stato_prenotazione == 'annullata' &&
        previous.stato_prenotazione != 'annullata') {
 
        if (current.assicurata && current.cliente) {
            var utenteStat = new GlideRecord(utenteTable);
            if (utenteStat.get(current.cliente)) {
                var rimborso = parseFloat(previous.costo_totale || 0);
                var creditoAttuale = parseFloat(utenteStat.getValue('credito') || 0);
                var creditoNuovo = Math.min(creditoAttuale + rimborso, 1500);
                var effettivoRimborso = creditoNuovo - creditoAttuale;
 
                utenteStat.setValue('credito', creditoNuovo);
                utenteStat.update();
 
                current.credito_rimborsato = effettivoRimborso;
                current.costo_totale = 0;
                gs.info('[STATO ANNULLATA] Rimborso effettivo: €' + effettivoRimborso);
            }
        } else {
            current.credito_rimborsato = 0;
            current.costo_totale = previous.costo_totale;
        }
 
        if (current.veicolo) {
            var veicoloStat = new GlideRecord(veicoloTable);
            if (veicoloStat.get(current.veicolo)) {
                veicoloStat.setValue('disponibile', 'disponibile');
                veicoloStat.update();
            }
        }
 
        return;
    }
 
})(current, previous);
 
 ]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-05-16 12:28:48</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f81cc265c3652210e9a97205e401311e</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>Gestione funzionalità prenotazione</sys_name>
        <sys_overrides/>
        <sys_package display_value="FurgonChin" source="x_1763019_furgonch">517232b4c3212210e9a97205e401316d</sys_package>
        <sys_policy/>
        <sys_scope display_value="FurgonChin">517232b4c3212210e9a97205e401316d</sys_scope>
        <sys_update_name>sys_script_f81cc265c3652210e9a97205e401311e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-22 14:54:52</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=f81cc265c3652210e9a97205e401311e"/>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>f81cc265c3652210e9a97205e401311e</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-05-16 12:28:48</sys_created_on>
        <sys_id>5a7cce25c3652210e9a97205e401312d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-16 12:28:48</sys_updated_on>
        <table>sys_script</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
